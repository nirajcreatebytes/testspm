# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:

jobs:
  build:
    permissions: write-all
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
   # - name: Build
   #   run: swift build -v
   # - name: Run tests
   #  run: swift test -v
    - name: Generate Version
      uses: actions/github-script@v5
      with:
        script: |
          const fs = require('fs');

          const packageJson = JSON.parse(fs.readFileSync('Sources/testspm/spmversion.json', 'utf8'));
          const version = packageJson.version;
          const major = version.split('.')[0];
          const minor = version.split('.')[1];
          const patch = parseInt(version.split('.')[2]) + 1;
          const newVersion = `${major}.${minor}.${patch}`;
          console.log(`::set-env name=NEW_VERSION::${newVersion}`);
    - name: Build project # This would actually build your project, using zip for an example artifact
      run: |
        zip --junk-paths my-artifact README.md
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NEW_VERSION }}
        release_name: ${{ env.NEW_VERSION }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./my-artifact.zip
        asset_name: my-artifact.zip
        asset_content_type: application/zip
        

